library(neuralnet)

# Load the data
data(NFL_RBs)

# Separate the data into training and testing sets
set.seed(123)
train_index <- sample(1:nrow(NFL_RBs), size = 0.8, replace = FALSE)
train_data <- NFL_RBs[train_index, ]
test_data <- NFL_RBs[-train_index, ]

# Create the neural network
model <- neuralnet(injured ~ carries + rushing_yards + touchdowns, data = train_data)

# Make predictions on the test data
predictions <- predict(model, newdata = test_data)

# Evaluate the model
confusion_matrix <- table(test_data$injured, predictions)
accuracy <- (confusion_matrix[1,1] + confusion_matrix[2,2]) / nrow(test_data)
print(accuracy)




"""
Here is an explanation of the code:

The first line of code loads the NFL_RBs data set.
The second line of code separates the data into training and testing sets. The train_index variable is a vector of indices that randomly selects 80% of the rows from the NFL_RBs data set. The train_data variable is a subset of the NFL_RBs data set that includes only the rows with indices in train_index. The test_data variable is a subset of the NFL_RBs data set that includes only the rows with indices that are not in train_index.
The third line of code creates the neural network. The neuralnet function takes three arguments: the formula for the model, the data set to use for training, and the number of hidden layers in the network. The formula for the model specifies that the outcome variable is injured and the predictor variables are carries, rushing_yards, and touchdowns. The data set argument specifies that the NFL_RBs data set should be used for training. The hidden argument specifies that there should be one hidden layer in the network.
The fourth line of code makes predictions on the test data. The predict function takes two arguments: the neural network model and the data set to make predictions on. The predict function returns a vector of predictions, where each prediction is a binary value indicating whether the running back is predicted to be injured (1) or not injured (0).
The fifth line of code evaluates the model. The confusion_matrix function takes two arguments: the actual values of the outcome variable and the predicted values of the outcome variable. The confusion_matrix function returns a matrix that summarizes the performance of the model. The accuracy of the model is calculated by dividing the number of correct predictions by the total number of predictions.
I hope this helps!
"""
